program -> proghead block .
proghead -> PROGRAM STR ;
block -> consexpl varexpl procdefi compsent
consexpl -> CONST consdefi conssuff ; | @
consdefi -> STR = NUM ;
conssuff -> , consdefi conssuff | @
varexpl -> VAR vardefi varsuff | @
vardefi -> STR idsuff : typeil ;
idsuff -> , STR idsuff | @
varsuff -> vardefi varsuff | @
typeil -> INTEGER | REAL
procdefi -> procedh block ; procsuff | @
procedh -> PROCEDURE STR argument
argument -> ( STR : typeil )
procsuff -> procedh block ; procsuff | @
sentence -> assipro | ifsent | whilsent | read | write | compsent | @
assipro -> STR suffix
suffix -> express | ( express ) | @
ifsent -> IF condition THEN sentence
whilsent -> WHILE condition DO sentence
read -> READ ( STR idsuff )
write -> WRITE ( express exprsuff )
exprsuff -> , express exprsuff | @
compsent -> BEGIN sentence sentsuff END
sentsuff -> ; sentence sentsuff | @
condition -> express respoper express | ODD express
express -> + term termsuff | - term termsuff | term termsuff
termsuff -> addoper term termsuff | @
term -> factor factsuff
factsuff -> muloper factor factsuff | @
factor -> STR | NUM | ( express )
addoper -> + | -
muloper -> * | /
respoper -> = | <> | < | <= | > | >=
